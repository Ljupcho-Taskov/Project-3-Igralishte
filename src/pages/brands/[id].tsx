import React, { useEffect, useState } from "react";
import { ProductsType } from "../../types/types";
import Head from "next/head";
import { GetStaticPaths, GetStaticProps } from "next";
import Header from "../../components/header/Header";
import { useCart } from "../../context/CartContext";
import { useRouter } from "next/router";
import Pagination from "../../components/Pagination";
import FourAccordions from "../../components/FourAccordions";
import BrandItem from "../../components/BrandItem";

interface Props {
  brand: ProductsType;
  images: ProductsType["images"];
  allPBrandsData: ProductsType[];
}

const BrandDetailsPage: React.FC<Props> = ({ brand, allPBrandsData }) => {
  const router = useRouter();
  const [selectedImage, setSelectedImage] = useState<string>(brand.img);
  const { cart, favorites, addToCart, addToFavorites } = useCart();
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const [isAddedToFavorites, setIsAddedToFavorites] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [filteredProducts, setFilteredProducts] = useState<ProductsType[]>([]);

  const productsPerPage = 6;

  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentBrands = allPBrandsData.slice(
    indexOfFirstProduct,
    indexOfLastProduct
  );

  const totalPages = Math.ceil(allPBrandsData.length / productsPerPage);

  useEffect(() => {
    setIsAddedToCart(cart.some((cartItem) => cartItem.id === brand.id));
    setIsAddedToFavorites(favorites.some((favItem) => favItem.id === brand.id));
  }, [cart, favorites, brand.id]);

  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  const handlePrevPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleThumbnailClick = (image: string) => {
    setSelectedImage(image);
  };

  const handleAddToCart = () => {
    if (!isAddedToCart) {
      addToCart(brand);
      setIsAddedToCart(true);
      setIsAddedToFavorites(false);
    }
  };

  const handleAddToFavorites = () => {
    if (!isAddedToFavorites) {
      addToFavorites(brand);
      setIsAddedToFavorites(true);
      setIsAddedToCart(false);
    }
  };

  const handleGoToCart = () => {
    router.push({
      pathname: "/order",
      query: { cart: true },
    });
  };

  const handleGoToFavorites = () => {
    router.push({
      pathname: "/order",
      query: { favorites: true },
    });
  };

  const [relatedProductsData, setRelatedProductsData] = useState<
    ProductsType[]
  >([]);

  const fetchRelatedProducts = () => {
    const MIN_RELATED_PRODUCTS = 6;
    const relatedProducts = [];
    const usedIndexes = new Set();

    while (relatedProducts.length < MIN_RELATED_PRODUCTS) {
      const randomNo = Math.floor(Math.random() * allPBrandsData.length);
      if (!usedIndexes.has(randomNo)) {
        usedIndexes.add(randomNo);
        relatedProducts.push(allPBrandsData[randomNo]);
      }
    }

    return relatedProducts;
  };

  useEffect(() => {
    const relatedProducts = fetchRelatedProducts();
    setRelatedProductsData(relatedProducts);
  }, []);
  return (
    <>
      <Head>
        <title>Store - Brand Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="col d-flex flex-column ">
        <h3>Pocetna - Brands - {brand.category}</h3>
        <div>
          <img src={selectedImage} alt="IMG-PRODUCT" />
        </div>
        <div className="image-slider">
          {brand.images?.map((imageData, index) => {
            const imgKey = `img${index + 1}` as keyof typeof imageData;
            return (
              <img
                key={imageData.id}
                src={imageData[imgKey]}
                alt={`Thumbnail ${imageData.id}`}
                onClick={() =>
                  handleThumbnailClick(imageData[imgKey] as string)
                }
              />
            );
          })}
        </div>
        <p className="d-flex justify-content-between">
          <span>{brand.price} ден.</span>
          <img
            style={{ width: "30px", height: "30px" }}
            src="../../logo/cart.png"
            alt=""
          />
        </p>
        <p>{brand.description}</p>
        <p>Color:{brand.color}</p>
        <p>
          Size:
          {brand.size}
        </p>
        <p>Kolicina: {brand.amount}</p>
        <p>Materijal: {brand.material}</p>
        <p>Nasoki za odrzuvanje: {brand.maintenance}</p>
        {!isAddedToCart ? (
          <>
            <button onClick={handleAddToCart}>add to cart</button>
          </>
        ) : (
          <>
            <button onClick={handleGoToCart}>added, go to cart</button>
          </>
        )}
        {!isAddedToFavorites ? (
          <>
            <button onClick={handleAddToFavorites}>add to favorites</button>
          </>
        ) : (
          <>
            <button onClick={handleGoToFavorites}>
              added, go to favorites
            </button>
          </>
        )}
      </div>
      <div className="container">
        <FourAccordions />
        <div className="row">
          <h3>Drugi Parcinja</h3>
          {currentBrands.map((item) => (
            <BrandItem {...item} key={item.id} />
          ))}

          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            handlePageChange={handlePageChange}
            handlePrevPage={handlePrevPage}
            handleNextPage={handleNextPage}
          />
        </div>
      </div>
    </>
  );
};
export default BrandDetailsPage;

export const getStaticPaths: GetStaticPaths = async () => {
  const BrandsRes = await fetch("http://localhost:5001/brands");
  const BrandsData: ProductsType[] = await BrandsRes.json();

  const paths = BrandsData.map((brand) => {
    return {
      params: {
        id: brand.id,
      },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const allBrandsRes = await fetch("http://localhost:5001/brands");
  const allPBrandsData: ProductsType[] = await allBrandsRes.json();

  let brand: ProductsType | undefined = undefined;

  if (params?.id) {
    const featuredBrandsRes = await fetch(
      `http://localhost:5001/brands/${params.id}`
    );
    brand = await featuredBrandsRes.json();
  }

  return {
    props: {
      brand,
      allPBrandsData,
    },
  };
};
