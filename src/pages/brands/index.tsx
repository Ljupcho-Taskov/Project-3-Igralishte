import React, { useEffect, useState } from "react";
import { NextPage, GetServerSideProps } from "next";
import { useRouter } from "next/router";
import Header from "../../components/header/Header";
import Footer from "../../components/footer/Footer";
import BrandItem from "../../components/BrandItem";
import { ProductsType } from "../../types/types";
import Head from "next/head";
import ProductItem from "../../components/ProductItem";

interface BrandsPageProps {
  brandsData: ProductsType[];
  productsData: ProductsType[];
  currentPage: number;
  totalPages: number;
}

const BrandsPage: NextPage<BrandsPageProps> = ({
  brandsData,
  productsData,
}) => {
  const router = useRouter();
  const { brand, category } = router.query;

  const [currentPage, setCurrentPage] = useState(1);

  const productsPerPage = 10;

  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = brandsData.slice(
    indexOfFirstProduct,
    indexOfLastProduct
  );

  const headerBrand = brand ? brand : "";
  const headerCategory = category || "Сите";
  const filteredProducts = productsData.filter(
    (product) => product.brand === category
  );

  return (
    <>
      <Head>
        <title>Igralishte</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="container py-3 w-90">
        <div className="row mb-3">
          <div className="col-12">
            <p className="d-flex">
              <span
                className="pointer"
                onClick={() => {
                  router.push({
                    pathname: "/",
                  });
                }}
              >
                Почетна
              </span>
              {headerBrand ? (
                <span className="d-flex align-items-center">
                  <i className="fa-solid fa-angle-right mx-1"></i>
                  {headerBrand}
                </span>
              ) : null}
              {headerCategory ? (
                <span className="d-flex align-items-center">
                  <i className="fa-solid fa-angle-right mx-1"></i>
                  {headerCategory}
                </span>
              ) : null}
            </p>
          </div>
        </div>
        <div className="row py-4">
          <div className="col-12 d-flex  align-items-center">
            <div className="faq-sparks">
              <img
                src="../../logo/sparks-elements-and-symbols-isolated-on-white-background-free-vector 2.png"
                alt=""
              />
            </div>
            <h2 className="faq-header">{headerCategory}</h2>
          </div>
        </div>
        <div className="row">
          {currentProducts.map((item) => (
            <BrandItem key={item.id} {...item} />
          ))}
        </div>
        {filteredProducts.length > 0 ? (
          <>
            <div className="row my-3">
              <div className="col-12">
                <h3>Парчиња од брендот:</h3>
              </div>
            </div>
            <div className="row">
              {filteredProducts.map((item, index) => (
                <ProductItem index={index} {...item} key={item.id} />
              ))}
            </div>
          </>
        ) : null}
      </div>
      <Footer />
    </>
  );
};

export default BrandsPage;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let brandsRes: Response;
  let productsRes: Response;

  if (query.category) {
    brandsRes = await fetch(
      `https://igralishte.onrender.com/brands?q=${query.category}`
    );
    productsRes = await fetch(
      `https://igralishte.onrender.com/products?q=${query.category}`
    );
  } else {
    brandsRes = await fetch("https://igralishte.onrender.com/brands");
    productsRes = await fetch("https://igralishte.onrender.com/products");
  }

  const brandsData: ProductsType[] = await brandsRes.json();
  const productsData: ProductsType[] = await productsRes.json();

  return {
    props: { brandsData, productsData },
  };
};
